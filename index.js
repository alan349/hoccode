require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");

// Bot d√πng polling
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

// L∆∞u tr·∫°ng th√°i ng∆∞·ªùi d√πng
let userSteps = {};

// ‚úÖ X·ª≠ l√Ω l·ªánh /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  // Reset b∆∞·ªõc c≈© (n·∫øu c√≥)
  delete userSteps[chatId];

  // Kh·ªüi t·∫°o tr·∫°ng th√°i m·ªõi
  userSteps[chatId] = { step: 0, data: {} };

  bot.sendMessage(chatId, "üì¶ Nh·∫≠p t√™n project Vercel b·∫°n mu·ªën t·∫°o:");
});

// ‚úÖ X·ª≠ l√Ω t·ª´ng tin nh·∫Øn ng∆∞·ªùi d√πng
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  // B·ªè qua /start v√¨ ƒë√£ x·ª≠ l√Ω ri√™ng
  if (text === "/start") return;

  // N·∫øu ch∆∞a c√≥ b∆∞·ªõc n√†o ‚Üí b·∫Øt ƒë·∫ßu l·∫°i
  if (!userSteps[chatId]) {
    userSteps[chatId] = { step: 0, data: {} };
    bot.sendMessage(chatId, "üì¶ Nh·∫≠p t√™n project Vercel b·∫°n mu·ªën t·∫°o:");
    return;
  }

  const step = userSteps[chatId].step;

  if (step === 0) {
    userSteps[chatId].data.projectName = text;
    userSteps[chatId].step++;
    bot.sendMessage(chatId, "üîê Nh·∫≠p TELEGRAM_BOT_TOKEN (s·∫Ω d√πng l√†m bi·∫øn m√¥i tr∆∞·ªùng):");
  } else if (step === 1) {
    userSteps[chatId].data.envToken = text;
    userSteps[chatId].step++;
    bot.sendMessage(chatId, "üí¨ Nh·∫≠p TELEGRAM_CHAT_ID (s·∫Ω d√πng l√†m bi·∫øn m√¥i tr∆∞·ªùng):");
  } else if (step === 2) {
    userSteps[chatId].data.envChatId = text;

    const { projectName, envToken, envChatId } = userSteps[chatId].data;

    try {
      const headers = {
        Authorization: `Bearer ${process.env.VERCEL_TOKEN}`,
        "Content-Type": "application/json"
      };

      // 1. T·∫°o project
      await axios.post(
        "https://api.vercel.com/v13/projects",
        {
          name: projectName,
          gitRepository: {
            type: "github",
            repo: "alan349/602ver3"
          }
        },
        { headers }
      );

      // 2. G·ª≠i bi·∫øn TELEGRAM_BOT_TOKEN
      await axios.post(
        `https://api.vercel.com/v9/projects/${projectName}/env`,
        {
          key: "TELEGRAM_BOT_TOKEN",
          value: envToken,
          target: ["production"]
        },
        { headers }
      );

      // 3. G·ª≠i bi·∫øn TELEGRAM_CHAT_ID
      await axios.post(
        `https://api.vercel.com/v9/projects/${projectName}/env`,
        {
          key: "TELEGRAM_CHAT_ID",
          value: envChatId,
          target: ["production"]
        },
        { headers }
      );

      const link = `https://${projectName}.vercel.app`;
      bot.sendMessage(chatId, `‚úÖ Project ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!\nüîó ${link}`);
    } catch (err) {
      bot.sendMessage(chatId, `‚ùå L·ªói t·∫°o project ho·∫∑c set bi·∫øn m√¥i tr∆∞·ªùng:\n${err.response?.data?.error?.message || err.message}`);
    }

    // Xo√° tr·∫°ng th√°i sau khi xong
    delete userSteps[chatId];
  }
});
